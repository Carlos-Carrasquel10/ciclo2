
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 13 21:01:17 COT 2022
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 13 21:01:17 COT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\005\000\002" +
    "\003\004\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\024\005\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\021\006\000\002\021\007\000\002\021\007\000\002\021" +
    "\007\000\002\021\007\000\002\021\007\000\002\020\004" +
    "\000\002\020\004\000\002\020\003\000\002\020\003\000" +
    "\002\004\005\000\002\004\007\000\002\004\007\000\002" +
    "\004\006\000\002\004\006\000\002\006\011\000\002\006" +
    "\010\000\002\014\003\000\002\014\003\000\002\014\005" +
    "\000\002\007\015\000\002\011\011\000\002\012\013\000" +
    "\002\013\011\000\002\015\012\000\002\015\011\000\002" +
    "\005\005\000\002\005\004\000\002\005\004\000\002\010" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\006\011\004\046\005\001\002\000\004\046" +
    "\242\001\002\000\004\040\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\041\011\001" +
    "\002\000\004\042\012\001\002\000\022\011\027\014\031" +
    "\015\026\020\033\021\032\022\014\057\022\061\015\001" +
    "\002\000\026\011\uffea\014\uffea\015\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\043\uffea\057\uffea\061\uffea\001\002\000" +
    "\004\040\207\001\002\000\014\024\131\025\130\026\132" +
    "\027\125\030\126\001\002\000\026\011\ufff7\014\ufff7\015" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\043\ufff7\057\ufff7" +
    "\061\ufff7\001\002\000\026\011\ufffd\014\ufffd\015\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\043\ufffd\057\ufffd\061\ufffd" +
    "\001\002\000\026\011\027\014\031\015\026\017\072\020" +
    "\033\021\032\022\014\043\206\057\022\061\015\001\002" +
    "\000\026\011\ufff3\014\ufff3\015\ufff3\017\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\043\ufff3\057\ufff3\061\ufff3\001\002\000\014" +
    "\024\131\025\130\026\132\027\125\030\126\001\002\000" +
    "\026\011\ufffb\014\ufffb\015\ufffb\017\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\043\ufffb\057\ufffb\061\ufffb\001\002\000\026\011" +
    "\uffef\014\uffef\015\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\043\uffef\057\uffef\061\uffef\001\002\000\026\011\ufff9\014" +
    "\ufff9\015\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\043\ufff9" +
    "\057\ufff9\061\ufff9\001\002\000\004\040\203\001\002\000" +
    "\006\035\166\057\167\001\002\000\026\011\uffec\014\uffec" +
    "\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\043\uffec\057" +
    "\uffec\061\uffec\001\002\000\004\040\153\001\002\000\004" +
    "\040\116\001\002\000\004\040\036\001\002\000\026\011" +
    "\ufff4\014\ufff4\015\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\043\ufff4\057\ufff4\061\ufff4\001\002\000\026\011\ufff2\014" +
    "\ufff2\015\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\043\ufff2" +
    "\057\ufff2\061\ufff2\001\002\000\020\005\050\006\041\010" +
    "\040\036\043\057\044\060\042\061\047\001\002\000\004" +
    "\032\114\001\002\000\012\031\uffd2\032\uffd2\041\uffd2\051" +
    "\uffd2\001\002\000\004\006\113\001\002\000\012\031\uffd3" +
    "\032\uffd3\041\uffd3\051\uffd3\001\002\000\006\041\uffca\051" +
    "\uffca\001\002\000\004\032\110\001\002\000\010\031\106" +
    "\041\uffc9\051\uffc9\001\002\000\004\041\055\001\002\000" +
    "\004\032\052\001\002\000\004\005\051\001\002\000\012" +
    "\031\uffd5\032\uffd5\041\uffd5\051\uffd5\001\002\000\006\057" +
    "\054\061\053\001\002\000\010\031\uffe0\041\uffe0\051\uffe0" +
    "\001\002\000\010\031\uffde\041\uffde\051\uffde\001\002\000" +
    "\004\042\056\001\002\000\022\011\027\014\031\015\026" +
    "\020\033\021\032\022\014\057\022\061\015\001\002\000" +
    "\026\011\027\014\031\015\026\017\072\020\033\021\032" +
    "\022\014\043\065\057\022\061\015\001\002\000\026\011" +
    "\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\043\uffeb\057\uffeb\061\uffeb\001\002\000\026\011\ufff8\014" +
    "\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\043\ufff8" +
    "\057\ufff8\061\ufff8\001\002\000\026\011\ufffe\014\ufffe\015" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\043\ufffe\057\ufffe" +
    "\061\ufffe\001\002\000\026\011\ufff1\014\ufff1\015\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\043\ufff1\057\ufff1\061\ufff1" +
    "\001\002\000\026\011\ufffc\014\ufffc\015\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\043\ufffc\057\ufffc\061\ufffc\001\002" +
    "\000\026\011\uffc6\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\043\uffc6\057\uffc6\061\uffc6\001\002\000\026" +
    "\011\uffee\014\uffee\015\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\043\uffee\057\uffee\061\uffee\001\002\000\026\011\ufffa" +
    "\014\ufffa\015\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\043" +
    "\ufffa\057\ufffa\061\ufffa\001\002\000\004\017\072\001\002" +
    "\000\026\011\uffed\014\uffed\015\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\043\uffed\057\uffed\061\uffed\001\002\000\004" +
    "\042\075\001\002\000\026\011\ufff5\014\ufff5\015\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\043\ufff5\057\ufff5\061\ufff5" +
    "\001\002\000\026\011\ufff0\014\ufff0\015\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\043\ufff0\057\ufff0\061\ufff0\001\002" +
    "\000\022\011\027\014\031\015\026\020\033\021\032\022" +
    "\014\057\022\061\015\001\002\000\026\011\027\014\031" +
    "\015\026\017\072\020\033\021\032\022\014\043\077\057" +
    "\022\061\015\001\002\000\004\020\100\001\002\000\004" +
    "\040\101\001\002\000\020\005\050\006\041\010\040\036" +
    "\043\057\044\060\042\061\047\001\002\000\004\041\103" +
    "\001\002\000\004\051\104\001\002\000\026\011\uffc5\014" +
    "\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\043\uffc5" +
    "\057\uffc5\061\uffc5\001\002\000\026\011\ufff6\014\ufff6\015" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\043\ufff6\057\ufff6" +
    "\061\ufff6\001\002\000\016\005\050\006\041\010\040\057" +
    "\044\060\042\061\047\001\002\000\006\041\uffc8\051\uffc8" +
    "\001\002\000\006\057\112\061\111\001\002\000\010\031" +
    "\uffdf\041\uffdf\051\uffdf\001\002\000\010\031\uffdd\041\uffdd" +
    "\051\uffdd\001\002\000\012\031\uffd4\032\uffd4\041\uffd4\051" +
    "\uffd4\001\002\000\012\005\050\006\041\010\040\060\042" +
    "\001\002\000\010\031\uffdc\041\uffdc\051\uffdc\001\002\000" +
    "\020\005\050\006\041\010\040\041\120\057\123\060\042" +
    "\061\124\001\002\000\006\032\114\041\151\001\002\000" +
    "\004\051\150\001\002\000\004\041\146\001\002\000\004" +
    "\041\144\001\002\000\020\024\131\025\130\026\132\027" +
    "\125\030\126\032\110\041\140\001\002\000\020\024\131" +
    "\025\130\026\132\027\125\030\126\032\052\041\133\001" +
    "\002\000\006\057\uffe2\061\uffe2\001\002\000\006\057\uffe1" +
    "\061\uffe1\001\002\000\006\057\136\061\135\001\002\000" +
    "\006\057\uffe4\061\uffe4\001\002\000\006\057\uffe5\061\uffe5" +
    "\001\002\000\006\057\uffe3\061\uffe3\001\002\000\004\051" +
    "\134\001\002\000\026\011\uffd8\014\uffd8\015\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\043\uffd8\057\uffd8\061\uffd8\001" +
    "\002\000\030\011\uffe9\014\uffe9\015\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\041\uffe9\043\uffe9\057\uffe9\061\uffe9\001" +
    "\002\000\030\011\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\041\uffe7\043\uffe7\057\uffe7\061\uffe7\001" +
    "\002\000\006\057\143\061\142\001\002\000\004\051\141" +
    "\001\002\000\026\011\uffd9\014\uffd9\015\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\043\uffd9\057\uffd9\061\uffd9\001\002" +
    "\000\030\011\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\041\uffe8\043\uffe8\057\uffe8\061\uffe8\001\002" +
    "\000\030\011\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\041\uffe6\043\uffe6\057\uffe6\061\uffe6\001\002" +
    "\000\004\051\145\001\002\000\026\011\uffd7\014\uffd7\015" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\043\uffd7\057\uffd7" +
    "\061\uffd7\001\002\000\004\051\147\001\002\000\026\011" +
    "\uffd6\014\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\043\uffd6\057\uffd6\061\uffd6\001\002\000\026\011\uffdb\014" +
    "\uffdb\015\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\043\uffdb" +
    "\057\uffdb\061\uffdb\001\002\000\004\051\152\001\002\000" +
    "\026\011\uffda\014\uffda\015\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\043\uffda\057\uffda\061\uffda\001\002\000\020\005" +
    "\050\006\041\010\040\036\043\057\044\060\042\061\047" +
    "\001\002\000\004\041\155\001\002\000\004\042\156\001" +
    "\002\000\024\011\027\014\031\015\026\020\033\021\032" +
    "\022\014\043\160\057\022\061\015\001\002\000\026\011" +
    "\027\014\031\015\026\017\072\020\033\021\032\022\014" +
    "\043\161\057\022\061\015\001\002\000\026\011\uffcb\014" +
    "\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\043\uffcb" +
    "\057\uffcb\061\uffcb\001\002\000\030\011\uffcc\014\uffcc\015" +
    "\uffcc\016\162\017\uffcc\020\uffcc\021\uffcc\022\uffcc\043\uffcc" +
    "\057\uffcc\061\uffcc\001\002\000\004\042\163\001\002\000" +
    "\022\011\027\014\031\015\026\020\033\021\032\022\014" +
    "\057\022\061\015\001\002\000\026\011\027\014\031\015" +
    "\026\017\072\020\033\021\032\022\014\043\165\057\022" +
    "\061\015\001\002\000\026\011\uffc7\014\uffc7\015\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\043\uffc7\057\uffc7\061\uffc7" +
    "\001\002\000\004\057\201\001\002\000\012\023\173\034" +
    "\170\035\172\051\171\001\002\000\004\061\177\001\002" +
    "\000\026\011\uffd1\014\uffd1\015\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\043\uffd1\057\uffd1\061\uffd1\001\002\000\004" +
    "\051\176\001\002\000\004\061\174\001\002\000\004\051" +
    "\175\001\002\000\026\011\uffcf\014\uffcf\015\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\043\uffcf\057\uffcf\061\uffcf\001" +
    "\002\000\026\011\uffce\014\uffce\015\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\043\uffce\057\uffce\061\uffce\001\002\000" +
    "\004\051\200\001\002\000\026\011\uffd0\014\uffd0\015\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\043\uffd0\057\uffd0\061" +
    "\uffd0\001\002\000\004\051\202\001\002\000\026\011\uffcd" +
    "\014\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\043" +
    "\uffcd\057\uffcd\061\uffcd\001\002\000\020\005\050\006\041" +
    "\010\040\036\043\057\044\060\042\061\047\001\002\000" +
    "\004\041\205\001\002\000\026\011\uffbe\014\uffbe\015\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\022\uffbe\043\uffbe\057\uffbe\061" +
    "\uffbe\001\002\000\004\002\uffff\001\002\000\006\011\211" +
    "\057\212\001\002\000\004\041\236\001\002\000\004\057" +
    "\227\001\002\000\004\023\213\001\002\000\004\061\214" +
    "\001\002\000\004\051\215\001\002\000\020\005\050\006" +
    "\041\010\040\036\043\057\044\060\042\061\047\001\002" +
    "\000\004\051\217\001\002\000\006\035\221\057\222\001" +
    "\002\000\004\041\uffc2\001\002\000\004\057\226\001\002" +
    "\000\006\034\223\035\224\001\002\000\004\061\225\001" +
    "\002\000\004\041\uffc0\001\002\000\004\041\uffc1\001\002" +
    "\000\004\041\uffbf\001\002\000\004\023\230\001\002\000" +
    "\004\061\231\001\002\000\004\051\232\001\002\000\020" +
    "\005\050\006\041\010\040\036\043\057\044\060\042\061" +
    "\047\001\002\000\004\051\234\001\002\000\006\035\221" +
    "\057\222\001\002\000\004\041\uffc3\001\002\000\004\042" +
    "\237\001\002\000\022\011\027\014\031\015\026\020\033" +
    "\021\032\022\014\057\022\061\015\001\002\000\026\011" +
    "\027\014\031\015\026\017\072\020\033\021\032\022\014" +
    "\043\241\057\022\061\015\001\002\000\026\011\uffc4\014" +
    "\uffc4\015\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\043\uffc4" +
    "\057\uffc4\061\uffc4\001\002\000\004\040\243\001\002\000" +
    "\004\041\244\001\002\000\004\042\245\001\002\000\022" +
    "\011\027\014\031\015\026\020\033\021\032\022\014\057" +
    "\022\061\015\001\002\000\026\011\027\014\031\015\026" +
    "\017\072\020\033\021\032\022\014\043\247\057\022\061" +
    "\015\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\017\004\016\006" +
    "\022\007\024\010\012\011\015\013\033\016\020\017\034" +
    "\021\023\024\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\061\006\063\007\066\010\057\011" +
    "\060\012\067\013\072\016\062\017\073\021\065\024\070" +
    "\001\001\000\002\001\001\000\004\023\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\045\020\036\022\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\056" +
    "\004\016\006\022\007\024\010\012\011\015\013\033\016" +
    "\020\017\034\021\023\024\027\001\001\000\030\004\061" +
    "\006\063\007\066\010\057\011\060\012\067\013\072\016" +
    "\062\017\073\021\065\024\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\075\004\016\006\022\007\024\010\012\011\015\013" +
    "\033\016\020\017\034\021\023\024\027\001\001\000\030" +
    "\004\061\006\063\007\066\010\057\011\060\012\067\013" +
    "\072\016\062\017\073\021\065\024\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\101\020\036\022" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\036\022\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\114\001" +
    "\001\000\002\001\001\000\010\020\116\022\121\024\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\136\001\001\000\004" +
    "\023\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\153\020\036\022\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\156\004\016\006" +
    "\022\007\024\010\012\011\015\013\033\016\020\017\034" +
    "\021\023\024\027\001\001\000\030\004\061\006\063\007" +
    "\066\010\057\011\060\012\067\013\072\016\062\017\073" +
    "\021\065\024\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\163\004\016\006\022" +
    "\007\024\010\012\011\015\013\033\016\020\017\034\021" +
    "\023\024\027\001\001\000\030\004\061\006\063\007\066" +
    "\010\057\011\060\012\067\013\072\016\062\017\073\021" +
    "\065\024\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\203" +
    "\020\036\022\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\215\020\036\022\044" +
    "\001\001\000\002\001\001\000\004\005\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\232\020\036\022\044\001\001\000\002\001" +
    "\001\000\004\005\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\237\004\016\006\022\007\024\010" +
    "\012\011\015\013\033\016\020\017\034\021\023\024\027" +
    "\001\001\000\030\004\061\006\063\007\066\010\057\011" +
    "\060\012\067\013\072\016\062\017\073\021\065\024\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\245\004\016\006\022" +
    "\007\024\010\012\011\015\013\033\016\020\017\034\021" +
    "\023\024\027\001\001\000\030\004\061\006\063\007\066" +
    "\010\057\011\060\012\067\013\072\016\062\017\073\021" +
    "\065\024\070\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASETR ::= Casetr Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASETR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= OP_RELACIONAL Op_logico OP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= OP_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TEXTOS ::= Texto2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TEXTOS ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TEXTOS ::= Comillas_simple Comillas_simple 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TEXTOS ::= Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TEXTOS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_PRINTF ::= Printf Parentesis_a OP_ARITMETICAS Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_PRINTF ::= Printf Parentesis_a OP_RELACIONAL Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_PRINTF ::= Printf Parentesis_a Numero Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_PRINTF ::= Printf Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_PRINTF ::= Printf Parentesis_a TEXTOS Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_PRINTF ::= Printf Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINTF",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP_RELACIONAL ::= TEXTOS Op_relacional TEXTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP_RELACIONAL ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP_RELACIONAL ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP_RELACIONAL ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP_RELACIONAL ::= Numero Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONAL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERADORES ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERADORES ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERADORES ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERADORES ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERADORES ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OP_ARITMETICAS ::= Identificador OPERADORES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICAS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OP_ARITMETICAS ::= Numero OPERADORES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICAS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OP_ARITMETICAS ::= Identificador OPERADORES Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICAS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OP_ARITMETICAS ::= Numero OPERADORES Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICAS",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= CASETR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA CASETR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= OP_ARITMETICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA OP_ARITMETICAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA SENTENCIA_PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA_PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA SWITCH_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SWITCH_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= T_dato Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

